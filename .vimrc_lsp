Plug 'neoclide/coc.nvim', {'branch': 'release'}

" if hidden is not set, TextEdit might fail.
set hidden

" Some servers have issues with backup files, see #649
set nobackup
set nowritebackup

" Better display for messages
set cmdheight=2

" You will have bad experience for diagnostic messages when it's default 4000.
set updatetime=300

" don't give |ins-completion-menu| messages.
set shortmess+=c

" always show signcolumns
set signcolumn=yes

set completeopt-=preview
set completeopt+=noinsert

let g:coc_user_config = {}
let g:coc_user_config['diagnostic.virtualText']=1
let g:coc_user_config['html.format.wrapLineLength']=80
let g:coc_user_config['html.format.wrapAttributes']='force-aligned'
let g:coc_user_config['prettier.neverIndentImports']=1
let g:coc_user_config['typescript.format.insertSpaceAfterOpeningAndBeforeClosingNonemptyBraces']=1
let g:coc_user_config['typescript.preferences.importModuleSpecifier']='relative'
let g:coc_user_config['typescript.preferences.quoteStyle']='double'
let g:coc_user_config['tslint.autoFixOnSave']=1

" Use tab for trigger completion with characters ahead and navigate.
" Use command ':verbose imap <tab>' to make sure tab is not mapped by other plugin.
inoremap <silent><expr> <TAB>
      \ pumvisible() ? "\<C-n>" :
      \ <SID>check_back_space() ? "\<TAB>" :
      \ coc#refresh()
inoremap <expr><S-TAB> pumvisible() ? "\<C-p>" : "\<C-h>"

function! s:check_back_space() abort
  let col = col('.') - 1
  return !col || getline('.')[col - 1]  =~# '\s'
endfunction

" Use <c-space> to trigger completion.
inoremap <silent><expr> <c-space> coc#refresh()

" Use <cr> to confirm completion, `<C-g>u` means break undo chain at current position.
" Coc only does snippet and additional edit on confirm.
inoremap <expr> <cr> pumvisible() ? "\<C-y>" : "\<C-g>u\<CR>"
" Or use `complete_info` if your vim support it, like:
" inoremap <expr> <cr> complete_info()["selected"] != "-1" ? "\<C-y>" : "\<C-g>u\<CR>"

" Use `[g` and `]g` to navigate diagnostics
nmap <silent> [g <Plug>(coc-diagnostic-prev)
nmap <silent> ]g <Plug>(coc-diagnostic-next)

" Remap keys for gotos
nmap <silent> gd <Plug>(coc-definition)
nmap <silent> gy <Plug>(coc-type-definition)
nmap <silent> gi <Plug>(coc-implementation)
nmap <silent> gr <Plug>(coc-references)

nmap <Leader>r <Plug>(coc-rename)
nmap <Leader>k :call CocAction('format')<cr>
nmap <Leader>J <Plug>(coc-fix-current)
nnoremap <Leader>j :CocAction<cr>

nnoremap <Leader>vh :call <sid>show_documentation()<cr>
nnoremap <Leader>vo :<C-u>CocList outline<cr>
nnoremap <Leader>vd :<C-u>CocList diagnostics<cr>

nmap <silent> <Leader>c <Plug>(coc-cursors-position)

augroup mygroup
  autocmd!
  " Setup formatexpr specified filetype(s).
  autocmd FileType typescript,json setl formatexpr=CocAction('formatSelected')
  " Update signature help on jump placeholder
  autocmd User CocJumpPlaceholder call CocActionAsync('showSignatureHelp')
augroup end

function! s:show_documentation()
  if (index(['vim','help'], &filetype) >= 0)
    execute 'h '.expand('<cword>')
  else
    call CocAction('doHover')
  endif
endfunction

if &diff
  let g:coc_enabled=0
endif
